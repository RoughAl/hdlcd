Description of the hdlcd access protocol

1.) Connect a TCP socket to the listener port of the hdlcd (currently 10000)
2.) Send a session header describing the type of data exchange
3.) Send and receive encapsulated packets as well as control packets describing the state of the hdlc protocol

Session header format:
---
The session header must and can only be sent once after initiation of the TCP socket.

Session header format:
+---------+--------+--------------------------------+----------------------+
| 1 Byte  | 1 Byte | 1 Byte                         | x Byte               |
| Version | SAP    | Length of USB port description | USB port path string |
+---------+--------+--------------------------------+----------------------+

Version: 0x00 is currently the only supported version
SAP: 0x00: Payload Raw RW                 RECV_CTRL   SEND_CTRL 
     0x11: Port status, RX only           RECV_CTRL   SEND_CTRL 
     0x12: Port status, TX only           RECV_CTRL   SEND_CTRL 
     0x13: Port status, RX and TX         RECV_CTRL   SEND_CTRL 
     0x21: Payload Raw RO, RX only        RECV_CTRL
     0x22: Payload Raw RO, TX only        RECV_CTRL
     0x23: Payload Raw RO, RX and TX      RECV_CTRL
     0x31: HDLC Raw RO, RX only           RECV_CTRL
     0x32: HDLC Raw RO, TX only           RECV_CTRL
     0x33: HDLC Raw RO, RX and TX         RECV_CTRL
     0x41: HDLC dissected RO, RX only     RECV_CTRL
     0x42: HDLC dissected RO, TX only     RECV_CTRL
     0x43: HDLC dissected RO, RX and TX   RECV_CTRL

Length: 0 up to 255 bytes are allowed. However, not all lengths make sense :-)
USB path: file name of the USB port without NULL termination

General error handling: on any error, the TCP socket is closed immediately without any notification!

An exemplary session header to open /dev/ttyUSB0 for Payload read / write:
00 00 0c 2f 64 65 76 2f 74 74 79 55 53 42 30

An exemplary session header to open /dev/ttyUSB1 for RO dissected HDLC frames RX and TX
00 43 0c 2f 64 65 76 2f 74 74 79 55 53 42 31



After the session header was transmitted, the TCP socket is used for exchange of packets.

Packets can be "control packets" or "data packets"

Packet header format:
+--------+----------------------
| 1 Byte | ... depends on Type
| Type   |
+--------+----------------------

Type: 0x00 Data packet
      0x01 Control packet

Data packet format:
+--------+--------------+---------+
| 1 Byte | 2 Byte       | x Byte  |
| 0x00   | Payload size | Payload |
+--------+--------------+---------+

Control packet format:
+--------+---------+
| 1 Byte | 1 Byte  |
| 0x01   | Command |
+--------+---------+      
      
      
Control packet, list of commands:
---
1.) Requests:
---
Port suspend request
Port resume request
Port restart request
Port reset request
Echo request (checks the TCP socket and the TCP entity at the HDLC daemon)

2.) Indications:
---
Port is open (???)
Port is suspended, flags: by self, by other
Port was resumed
Port was restarted, flags: by self, by other
Port was resetted, flags: by self, by other
Echo indication

3.) Confirmations
---
Echo confirmation (reply to a previous echo request)
