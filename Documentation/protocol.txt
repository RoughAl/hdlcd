Description of the hdlcd access protocol

1.) Connect a TCP socket to the listener port of the hdlcd (currently 10000)
2.) Send a session header describing the type of data exchange
3.) Send and receive encapsulated packets as well as control packets describing the state of the hdlc protocol

General:
---
Byte order: all multi-byte fields are in network byte order.
Error handling: on any error, the TCP socket is closed immediately without any notification!


=====================
Session header
=====================
The session header must and can only be sent once after initiation of the TCP socket.

Session header format:
+---------+--------+------------------------------+--------------------+
| 1 Byte  | 1 Byte | 1 Byte                       | x Byte             |
| Version | SAP    | Length of serial port string | Serial port string |
+---------+--------+------------------------------+--------------------+
Version:
- 0x00 is currently the only supported version

SAP:
- Specifies the "service access point", i.e., which data to be exchanged

Length of serial port string:
- The length of the following device name, without any null termination.
- 0 up to 255 bytes are allowed. However, not all lengths make sense :-)

Serial port string:
- The device name, without null termination.
- Examples: \dev\ttyUSB0 or "\\.\COM1"


Service access point specifier:
++------------------------------------------------------------------++
|| Service access point specifier (1 byte)                          ||
++--------------+----------+----------+--------------+--------------++
|| Bits 7...4   | Bit 3    | Bit 2    | Bit 1        | Bit 0        ||
|| Type of data | Reserved | Invalids | Deliver sent | Deliver rcvd ||
++--------------+----------+----------+--------------+--------------++
Type of data:
- 0x0*: Payload,          data read and write,   port status read and write
- 0x1*: Port status only, no data exchange,      port status read and write
- 0x2*: Payload Raw,      data read only,        port status read only
- 0x3*: HDLC Raw,         data read only,        port status read only
- 0x4*: HDLC dissected,   data read only,        port status read only
- 0x5*-0xF*: reserved for future use

Reserved:
- Bit 3: must be set to "0"

Invalids:
- Bit 2: set to "1" if invalid data should be delivered also

Direction flags:
- Bit 1: Set to "1" to subscribe for sent data
- Bit 0: Set to "1" to subscribe for received data
- If the direction flag makes sense, at least one of the bits 1 and 0 have to be set!



Description of the two most important session types:
- 0x0*: Payload:
--> - this one is used for any client dedicated to data exchange, e.g., gateways.
    - Can also suspend / resume serial ports.
    - Notifications regarding basic flow control (whether TCP-stream is open or stalled)
    - Easy to implement, but control packets may be stuck within the sended multiplex if the hdlcd stalled the transmission!

- 0x1*: Port status only: 
--> - this one /should/ used by any client dedicated to data exchange, e.g., gateways.
    - have a dedicated low-latency (no preceeding data packets) path for control packets to suspend / resume serial ports
    
==> best practice of implementing a gateway is to use two TCP-based access sockets per serial port:
    - one solely for data transmission and reception while ignoring all intertwined control packets, and
    - a second dedicated solely to control packets, providing a low-latency non-blocking control path.

The reference implementation provided in this toolbox internally provides exactly this, but this is not visible to
the user if the interface.





Examplemplary session headers
---
An exemplary session header to open /dev/ttyUSB0 for Payload RX/TX. Only received data is delivered (gateway mode)
00 01 0c 2f 64 65 76 2f 74 74 79 55 53 42 30

An exemplary session header to open /dev/ttyUSB0 for the control path. Both direction flags are unset.
00 10 0c 2f 64 65 76 2f 74 74 79 55 53 42 30

More interesting stuff: an exemplary session header to open /dev/ttyUSB1 for RO dissected HDLC frames RX and TX
00 43 0c 2f 64 65 76 2f 74 74 79 55 53 42 31



After the session header was transmitted, the TCP socket is used for exchange of packets.
The kind of exchanged packets depends on the provided session header: not all packets are
allowed / seen in each of the possible session types!


======================
Packets
======================

Packets can be "control packets" or "data packets"

Packet header format:
++--------------------------------------------------------++--------------------------
|| 1 Byte Type                                            || 0...N subsequent bytes
++------------+----------+----------+----------+----------++--------------------------
|| Bits 7...4 | Bit 3    | Bit 2    | Bit 1    | Bit 0    ||
|| Content    | Reserved | Reliable | Invalid  | Was sent || Depends on content field
++------------+----------+----------+----------+----------++--------------------------
Content:
- 0x0*: Data packet
- 0x1*: Control packet
- 0x2*-0xF*: reserved for future use  

Reserved:
- Bit 3: will be "0" and must be set to "0"

Reliable flag:
- Bit 2: is set to "1" if the packet was / has to be transmitted reliably by the hdlcd via HDLC

Invalid flag:
- Bit 1: is set to "1" if the packet is damaged, "0" if it is valid. Must be "0" on transmission.

Was sent:
- Bit 0: is set to "1" if the packet was sent via HDLC, "0" if not (-> then it was received via HDLC)





Data packet format:
+--------+--------------+---------+
| 1 Byte | 2 Bytes      | N Bytes |
| 0x0*   | Payload size | Payload |
+--------+--------------+---------+
Data packets, if transmitted via TCP to be sent via HDLC, must have:
- the "reserved" bit set to "0",
- the "reliable" flag set to "0" or "1" to demand for U-Frames (unreliable) or I-Frames (reliable), repectively,
- the "invalid" flag set to "0",
- the "was sent" flags set to "0".
==> Thus, the type byte _must_ be 0x00 or 0x04.

Data packets, if received, have:
- the "reserved" bit set to "0",
- the "reliable" flag indicates whether the packet was received via "0": U-Frames (unreliable) or "1": I-Frames (reliable),
- the "invalid" flag set to "0" if the packet was ok, "1" if iw was damaged / invalid (CRC error or junk),
- the "was sent"-flag packet set to "1" if the packet was sent via HDLC (by the HDLC daemon), "0" if it was received via HDLC,
==> The lower nibble of the type byte must be evaluated!


Control packet format:
++--------++----------------------------------++
|| 1 Byte || 1 Byte                           ||
++--------++--------------+-------------------++
|| 8 Bits || Bits 7...4   | Bits 3...0        ||
|| 0x10   || Command type | Depend on Command ||
++--------++--------------+-------------------++
Control packets, either if received or sent, must have:
- the "reserved" bit set to "0",
- the "reliable" flag set to "0",
- the "invalid" bit set to "0",
- the "was sent" flag set to "0".
==> Thus, the type byte _must_ be and will be always 0x10.

      
      
Control packet, list of command types (lower nibble):
---
1.) Requests: are sent by a client to the hdlcd
- 0x0*: Set port status request. The lower nibble has to be set.
- 0x10: Echo request
- 0x20: Keep alive packet. Are dropped by the hdlcd. These should be sent periodically to detect stale TCP connections.
- 0x30: Port kill request (immediate shutdown serial port handler and terminate all all related TCP connections)
- 0x4*-0xF*: reserved for future use



0x0*: Set port status request:
---
++--------++-----------------------------------------------++
|| 1 Byte || 1 Byte: control -> set port status request    ||
++--------++---------------+-------+-------+-------+-------++
|| 8 Bits || Bits 7...4    | Bit 3 | Bit 2 | Bit 1 | Bit 0 ||
|| 0x10   || 0 | 0 | 0 | 0 | Rsvd. | Rsvd. | Rsvd. | Lock  ||
++--------++---+---+---+---+-------+-------+-------+-------++
Rsvd flags: all reserved bits have to be set to "0"
Lock flag: set to "1" if the serial port has to be suspended and locked; "0" to release the lock, the serial port /may/ resume.


2.) Indications / confirmations: are sent by the hdlcd to a client
---
- 0x0*: Port status indication. The lower nibble has to be evaluated.
- 0x10: Echo confirmation (a reply to an echo request)
- 0x20: Keep alive packet. Just drop them. These are sent periodically to detect stale TCP connections.
- 0x4*-0xF*: reserved for future use






0x0*: Port status indication:
---
++--------++-----------------------------------------------++
|| 1 Byte || 1 Byte: control -> port status indication     ||
++--------++---------------+-------+-------+-------+-------++
|| 8 Bits || Bits 7...4    | Bit 3 | Bit 2 | Bit 1 | Bit 0 ||
|| 0x10   || 0 | 0 | 0 | 0 | Alive | FlowC | PSbO  | PSbS  ||
++--------++---+---+---+---+-------+-------+-------+-------++
- Alive flag: is set to "1" if the HDLC association is alive (baud rate, session up, echos ok), "0" if not
- FlowC flag: is set to "1" if the data flow is suspended, "0" if data packets are delivered
- PSbO flag: is set to "1" if the serial port is currently locked by others.
- PSbS flag: is set to "1" if the serial port is currently locked by self.

